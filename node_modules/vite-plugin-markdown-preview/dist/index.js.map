{"version":3,"sources":["../src/index.ts","../src/remark.ts"],"sourcesContent":["import fs from 'node:fs'\nimport path, { dirname } from 'node:path'\nimport { fileURLToPath } from 'node:url'\n\nimport type { Plugin } from 'vite'\n\nimport { type EnvType, remarkDemoBlock } from './remark'\n\nconst __dirname = dirname(fileURLToPath(import.meta.url))\n\nconst CODE_VUE_REGEXP = /.md.DemoBlockI[a-zA-Z0-9]{8}\\.vue$/\nconst DemoBlockMap = new Map<string, string>()\n\nexport type MarkdownPreviewOptions = {\n  component?: string\n}\n\nexport type MarkdownPreviewConfig = {\n  root: string\n  component: string\n  type: 'vite' | 'vitepress'\n}\n\nexport function MarkdownPreview(options?: MarkdownPreviewOptions): Plugin {\n  let vuePlugin: any = null\n  let envType: EnvType\n\n  const codePreview = 'vmp:components'\n  const codePreviewId = '\\0' + codePreview\n  const codePreviewSource = fs.readFileSync(\n    path.resolve(__dirname, './components/index.js'),\n    'utf-8'\n  )\n\n  const codePreviewCss = 'vmp:components.css'\n  const codePreviewCssId = '\\0' + codePreviewCss\n  const codePreviewCssSource = fs.readFileSync(\n    path.resolve(__dirname, './components/style.css'),\n    'utf-8'\n  )\n\n  const config: MarkdownPreviewConfig = Object.assign(\n    { component: 'CodePreview', type: 'vite' as const, root: '' },\n    options\n  )\n  return {\n    name: 'vite:markdown-preview',\n    // enforce: 'pre',\n    async configResolved(cfg) {\n      const isVitepress = cfg.plugins.find(p => p.name === 'vitepress')\n      vuePlugin = cfg.plugins.find(p => p.name === 'vite:vue')\n      envType = isVitepress ? 'vitepress' : 'vite'\n\n      config.root = cfg.root\n      config.type = envType\n    },\n    resolveId(id) {\n      if (id === codePreview) {\n        return codePreviewId\n      }\n      if (id === codePreviewCss) {\n        return codePreviewCssId\n      }\n      if (CODE_VUE_REGEXP.test(id)) {\n        return id\n      }\n    },\n    async load(id) {\n      if (id === codePreviewId) {\n        return codePreviewSource\n      }\n      if (id === codePreviewCssId) {\n        return codePreviewCssSource\n      }\n      if (CODE_VUE_REGEXP.test(id)) {\n        const blockId = '/' + path.relative(config.root, id)\n\n        const demoCode = DemoBlockMap.get(id) || DemoBlockMap.get(blockId)\n        return demoCode\n      }\n      if (id.endsWith('.md')) {\n        const { code, blocks } = remarkDemoBlock(id, fs.readFileSync(id, 'utf8'), config)\n        for (const k of Object.keys(blocks)) {\n          const blockKey = `${id}.${k}.vue`\n          const blockId = '/' + path.relative(config.root, blockKey)\n          DemoBlockMap.set(blockId, blocks[k])\n        }\n        return code\n      }\n    },\n    async handleHotUpdate(ctx) {\n      const { file, server, timestamp } = ctx\n      const { moduleGraph } = server\n      server.moduleGraph\n      if (file.endsWith('.md')) {\n        const { blocks } = remarkDemoBlock(file, fs.readFileSync(file, 'utf8'), config)\n        const updates: any[] = []\n        for (const k of Object.keys(blocks)) {\n          const blockKey = `${file}.${k}.vue`\n          const blockId = '/' + path.relative(config.root, blockKey)\n          DemoBlockMap.set(blockId, blocks[k])\n\n          const mod = moduleGraph.getModuleById(blockId)\n          if (mod) {\n            // console.log(mod)\n            const ret = await vuePlugin.handleHotUpdate({\n              file: blockId,\n              timestamp: timestamp,\n              modules: [mod],\n              read: () => blocks[k],\n              server: server,\n            })\n\n            updates.push(...ret)\n          }\n        }\n        if (updates.length > 0) {\n          return updates.filter(Boolean)\n        }\n      }\n    },\n  }\n}\n\nexport default MarkdownPreview\n","import { createHash } from 'node:crypto'\n\nimport type { Code, Parent } from 'mdast'\nimport { fromMarkdown } from 'mdast-util-from-markdown'\nimport { frontmatterFromMarkdown, frontmatterToMarkdown } from 'mdast-util-frontmatter'\nimport { toMarkdown } from 'mdast-util-to-markdown'\nimport { type Node, visit } from 'unist-util-visit'\n\nimport { MarkdownPreviewConfig } from '.'\n\nexport type EnvType = 'vite' | 'vitepress'\n\nexport function getHash(text: string): string {\n  return createHash('sha256').update(text).digest('hex').substring(0, 8)\n}\n\nfunction praseMeta(meta?: string | null) {\n  const metaArr = (meta || '').split(' ')\n  const ret: Record<string, string | boolean> = {}\n  for (const m of metaArr) {\n    const [key, val] = m.split('=', 2)\n    ret[key] = val || true\n  }\n  return ret\n}\nexport function remarkDemoBlock(id: string, code: string, config: MarkdownPreviewConfig) {\n  const tree = fromMarkdown(code, {\n    mdastExtensions: [frontmatterFromMarkdown(['yaml', 'toml'])],\n  })\n\n  const blocks: Record<string, string> = {}\n\n  visit(tree as Node, 'code', (node: Code, index: number, parent: Parent) => {\n    const lang = (node.lang || '').split(':')[0]\n    const meta = praseMeta(node.meta)\n    const preview = meta['preview']\n    const isDemo = preview && lang === 'vue'\n    if (isDemo) {\n      const hash = getHash(node.value)\n      const name = `DemoBlockI${hash}`\n      blocks[name] = node.value\n\n      parent.children.splice(\n        index,\n        1,\n        {\n          type: 'html',\n          value: `<CodePreviewWrapper \nlang=\"${decodeURIComponent(node.lang || '')}\" \nmeta=\"${decodeURIComponent(node.meta || '')}\" \ncode=\"${encodeURIComponent(node.value)}\"\ncomponent=\"${typeof preview === 'string' ? preview : config.component}\"\n>\n<${name}/>\n<template #code>`,\n        },\n        node,\n        {\n          type: 'html',\n          value: '\\n</template></CodePreviewWrapper>',\n        }\n      )\n      return index + 3\n    }\n  })\n  if (Object.keys(blocks).length > 0) {\n    tree.children.push({\n      type: 'html',\n      value: `<script setup>\\n\n      import 'vmp:components.css'\n      import { CodePreviewWrapper } from 'vmp:components'\n      ${Object.keys(blocks)\n        .map(k => `import ${k} from \"${id}.${k}.vue\";`)\n        .join('\\n')}\\n</script>`,\n    })\n    const code = toMarkdown(tree, {\n      extensions: [frontmatterToMarkdown(['yaml', 'toml'])],\n    })\n    return { code, blocks }\n  }\n  return { code, blocks }\n}\n"],"mappings":"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","names":["code"]}