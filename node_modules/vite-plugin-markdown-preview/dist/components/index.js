import { defineComponent as p, ref as i, openBlock as l, createElementBlock as a, normalizeClass as h, createElementVNode as n, renderSlot as c, normalizeStyle as g, getCurrentInstance as m, createVNode as v } from "vue";
const _ = p({
  name: "CodePreview",
  props: {
    code: { type: String, required: !0 },
    lang: { type: String, required: !0 },
    meta: { type: String, required: !0 }
  },
  setup(e) {
    const o = i(), d = i(0), t = i(!1);
    return {
      codeEl: o,
      height: d,
      copied: t,
      toggleCode: () => {
        const s = o.value ? o.value.offsetHeight : 0;
        d.value = d.value === 0 ? s : 0;
      },
      copyCode: () => {
        if (!t.value) {
          try {
            navigator.clipboard.writeText(e.code);
          } catch (s) {
            console.log(s);
          }
          t.value = !0, setTimeout(() => {
            t.value = !1;
          }, 1e3);
        }
      }
    };
  }
});
const w = (e, o) => {
  const d = e.__vccOpts || e;
  for (const [t, r] of o)
    d[t] = r;
  return d;
}, C = { class: "mdp-demo__preview" }, f = { class: "mdp-demo__toolbar" }, y = {
  key: 0,
  xmlns: "http://www.w3.org/2000/svg",
  fill: "none",
  height: "20",
  width: "20",
  stroke: "currentColor",
  "stroke-width": "2",
  viewBox: "0 0 24 24"
}, k = /* @__PURE__ */ n("path", {
  "stroke-linecap": "round",
  "stroke-linejoin": "round",
  d: "M9 5H7a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2h-2M9 5a2 2 0 0 0 2 2h2a2 2 0 0 0 2-2M9 5a2 2 0 0 1 2-2h2a2 2 0 0 1 2 2m-6 9 2 2 4-4"
}, null, -1), M = [
  k
], S = {
  key: 1,
  xmlns: "http://www.w3.org/2000/svg",
  fill: "none",
  height: "20",
  width: "20",
  stroke: "currentColor",
  "stroke-width": "2",
  viewBox: "0 0 24 24"
}, b = /* @__PURE__ */ n("path", {
  "stroke-linecap": "round",
  "stroke-linejoin": "round",
  d: "M9 5H7a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2h-2M9 5a2 2 0 0 0 2 2h2a2 2 0 0 0 2-2M9 5a2 2 0 0 1 2-2h2a2 2 0 0 1 2 2"
}, null, -1), B = [
  b
], P = /* @__PURE__ */ n("svg", {
  xmlns: "http://www.w3.org/2000/svg",
  class: "ionicon",
  viewBox: "0 0 512 512"
}, [
  /* @__PURE__ */ n("path", {
    fill: "none",
    stroke: "currentColor",
    "stroke-linecap": "round",
    "stroke-linejoin": "round",
    "stroke-width": "46",
    d: "M160 368L32 256l128-112M352 368l128-112-128-112M304 96l-96 320"
  })
], -1), $ = [
  P
], q = { ref: "codeEl" };
function E(e, o, d, t, r, u) {
  return l(), a("div", {
    class: h(["mdp-demo", e.height > 0 && "is-expanded"])
  }, [
    n("div", C, [
      c(e.$slots, "default")
    ]),
    n("div", f, [
      n("div", {
        class: "mdp-demo__btn mdp-demo__btn-copy",
        onClick: o[0] || (o[0] = (...s) => e.copyCode && e.copyCode(...s))
      }, [
        e.copied ? (l(), a("svg", y, M)) : (l(), a("svg", S, B))
      ]),
      n("div", {
        class: "mdp-demo__btn mdp-demo__btn-code",
        onClick: o[1] || (o[1] = (...s) => e.toggleCode && e.toggleCode(...s))
      }, $)
    ]),
    n("div", {
      class: "mdp-demo__code",
      style: g({ height: e.height + "px", visibility: e.height > 0 ? "visible" : "hidden" })
    }, [
      n("div", q, [
        c(e.$slots, "code")
      ], 512)
    ], 4)
  ], 2);
}
const H = /* @__PURE__ */ w(_, [["render", E]]), V = p({
  name: "CodePreviewWrapper",
  props: {
    code: { type: String, required: !0 },
    lang: { type: String, required: !0 },
    meta: { type: String, default: "" },
    component: { type: String, default: "CodePreview" }
  },
  setup(e, o) {
    const t = m().appContext.app.component(e.component), r = t || H;
    return () => v(
      r,
      {
        code: decodeURIComponent(e.code),
        lang: decodeURIComponent(e.lang),
        meta: decodeURIComponent(e.meta)
      },
      {
        default: o.slots.default,
        code: o.slots.code
      }
    );
  }
});
export {
  H as CodePreview,
  V as CodePreviewWrapper
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
